{
  "publishedAt": "07-24-2021",
  "title": "Building a Flutter App on Sitecore Headless",
  "content": "Based on the knowledge gathered in my [previous post](https://guidovtricht.nl/blog/exploring-sitecore-headless-services), we can now start building a Flutter App.\n\n*Note: The approach I took to build this Flutter App is not what I would use in any production-like scenario, it is merely an approach I took to demonstrate how we could render Sitecore content in any kind of application. Also, I am by no means an expert in building Mobile Apps. Better yet, this was my first attemptâ€¦*\n\nFirst things first, I had to know how to get started with Flutter. The Flutter documentation is pretty extensive and provides a getting started guide with some samples: [Getting Started](https://flutter.dev/docs/get-started/codelab)\nAfter I had my \"Hello World\" App running, I looked through something they call a cookbook: [Cookbook](https://flutter.dev/docs/cookbook)\nThe cookbook is a collection of examples on how to solve different kinds of problems. One that I though was really helpful for my PoC was the Named Routes example, showing me how to build actual pages with routes in Flutter: [Named Routes](https://flutter.dev/docs/cookbook/navigation/named-routes)\n\nBased on the Named Routes approach I was able to create a simple screen with some dummy text and navigate to a different screen after clicking on a button.\nUsing the example from the cookbook recipe, I did some research to see if it was possible to make these routes dynamic instead of having to hardcode the paths in the Router. And it turned out that was possible.\nUsing something call route generation (a function onGenerateRoute), I could call a different function which could generated a result object. The parameters of the function contained the path of the request, so in case of the homepage this was '/', but it could be any kind of path. This would be helpful when linking it to the Layout Service as the Layout Service also required the path to a page as we looked at earlier.\n\n```dart\nclass App extends MaterialApp {\n  App()\n      : super(\n          //home: DynamicWidget(),\n          initialRoute: '/',\n          onGenerateRoute: SitecoreRouter.generateRoute,\n        );\n}\n```\n\n*App.dart*\n\n```dart\nclass SitecoreRouter {\n  static Route<dynamic> generateRoute(RouteSettings settings) {\n    return MaterialPageRoute(\n        builder: (_) => [build the response object here]);\n  }\n}\n```\n\n*Router.dart*\n\nThe RouteSettings object in this generateRoute function contains the path of the request, which we can use to do our Layout Service request to Sitecore.\nI then started building out a Page object to return to the view. This object would have to trigger the Layout Service call and render different Flutter Widgets based on the response JSON.\n\n```dart\nclass SitecoreLayoutServiceClient {\n  Future<Response> requestLayout(String path) async {\n    String apiUrl = \"https://\" +\n        AppSettings.sitecoreCMHostname +\n        \"/sitecore/api/layout/render/jss\";\n    return Requests.get(apiUrl,\n        persistCookies: true,\n        queryParameters: <String, String>{\n          'sc_site': AppSettings.sitecoreSite,\n          'sc_apikey': AppSettings.sitecoreApiKey,\n          'item': path,\n          'sc_lang': AppSettings.sitecoreLanguage\n        });\n  }\n}\n```\n\n*Layoutservice.dart*\n\n```dart\nclass _DefaultPageState extends State<DefaultPage> with WidgetsBindingObserver {\n  @override\n  Widget build(BuildContext context) {\n    return FutureBuilder(\n      builder: (context, AsyncSnapshot<Response> response) {\n        if (response.hasData) {\n          var widgetJson = response.data!.json();\n          var contextJson = widgetJson[\"sitecore\"][\"context\"];\n          var routeJson = widgetJson[\"sitecore\"][\"route\"];\n          return Scaffold(\n            appBar: AppBar(\n              title: Text(routeJson[\"displayName\"].toString()),\n            ),\n            drawer: MaterialDrawer(\n                currentPage: routeJson[\"displayName\"].toString()),\n            body: SingleChildScrollView(\n              child: SitecorePlaceholder(routeJson[\"placeholders\"][\"main\"]),\n            ),\n          );\n        } else {\n          return Scaffold(\n            body: Center(\n              child: CircularProgressIndicator(),\n            ),\n          );\n        }\n      },\n      future: _getWidget(),\n    );\n  }\n  Future<Response> _getWidget() async {\n    return await SitecoreLayoutServiceClient().requestLayout(widget.path);\n  }\n}\n```\n\n*Default_page.dart*\n\nUsing this approach I was able to return a page with the page's Display Name as title. When navigating to different pages I would get to see the different Display Names of my Sitecore items.\n\nAfter I could see this work, I looked around on the internet to find people who did something similar, because the next part was a bit tricky if you didn't really knew what you were doing (like myself).\nIt was nice to see the Display Name in the Mobile App, but that doesn't mean the PoC was actually done. The next part that had to happen was to actually show the renderings and their content on the screen, meaning I would have to loop through all components in a placeholder and determine which Flutter Widget to render based on some field. And to make it more complicated, I wanted to get it working with multiple levels of placeholders.\n\nI am not going to write all that I found and did to make this happen, instead I am sharing the entire PoC repository on GitHub: \\[Sitecore Headless Flutter](https://github.com/GuidovTricht/SitecoreHeadlessFlutter)\nThe way it works is that there is a SitecoreWidgetRegistry(sitecore_widget_registry.dart), containing string - Widget builder classes combinations which I would trigger when rendering a rendering from any placeholder.\n\n```dart\nfinal _internalBuilders = <String, SitecoreWidgetBuilderContainer>{\n    SitecoreHeroBannerBuilder.type: SitecoreWidgetBuilderContainer(\n        builder: SitecoreHeroBannerBuilder.fromDynamic),\n    SitecorePromoContainerBuilder.type: SitecoreWidgetBuilderContainer(\n        builder: SitecorePromoContainerBuilder.fromDynamic),\n    SitecorePromoCardBuilder.type: SitecoreWidgetBuilderContainer(\n        builder: SitecorePromoCardBuilder.fromDynamic),\n    SitecoreSectionHeaderBuilder.type: SitecoreWidgetBuilderContainer(\n        builder: SitecoreSectionHeaderBuilder.fromDynamic),\n    SitecoreFooterBuilder.type: SitecoreWidgetBuilderContainer(\n        builder: SitecoreFooterBuilder.fromDynamic),\n  };\n```\n\nThe registry would figure out which builder class to use (like sitecore_hero_banner_builder.dart), and the builder class would then return a Widget object to render on the screen. \n\n```dart\n/// Returns the builder for the requested [type].  This will first search the\n/// registered custom builders, then if no builder is found, this will then\n/// search the library provided builders.\n///\n/// If no builder is registered for the given [type] then this will throw an\n/// [Exception].\nSitecoreWidgetBuilderBuilder getWidgetBuilder(String type) {\n  var container = _customBuilders[type] ?? _internalBuilders[type];\n  if (container == null) {\n    return PlaceholderBuilder.fromDynamic;\n  }\n  var builder = container.builder;\n  return builder;\n}\n```\n\nThe Widget builder would receive part of the Layout Service JSON response to render the Widget including the content as retrieved from Sitecore.\n\n```dart\nclass SitecoreHeroBannerBuilder extends SitecoreWidgetBuilder {\n  SitecoreHeroBannerBuilder({\n    this.image,\n    this.imageUrl,\n    this.title,\n    this.subtitle,\n  }) : super(numSupportedChildren: kNumSupportedChildren);\n  static const kNumSupportedChildren = 0;\n  static const type = 'HeroBanner';\n  final dynamic image;\n  final String? imageUrl;\n  final String? title;\n  final String? subtitle;\n  static SitecoreHeroBannerBuilder? fromDynamic(\n    dynamic map, {\n    SitecoreWidgetRegistry? registry,\n  }) {\n    SitecoreHeroBannerBuilder? result;\n    if (map != null) {\n      result = SitecoreHeroBannerBuilder(\n        image: map[\"Image\"],\n        title: map[\"Title\"][\"value\"],\n        subtitle: map[\"Subtitle\"][\"value\"],\n      );\n    }\n    return result;\n  }\n  @override\n  Widget buildCustom({\n    ChildWidgetBuilder? childBuilder,\n    required BuildContext context,\n    required SitecoreWidgetData data,\n    Key? key,\n  }) {\n    return Container(\n        height: 150,\n        width: MediaQuery.of(context).size.width,\n        child: Stack(\n          children: [\n            Image(image: NetworkImage(image[\"value\"][\"src\"])),\n            Center(\n              child: Column(\n                children: [\n                  Text(\n                    title!.toUpperCase(),\n                    style: GoogleFonts.ibmPlexMono(\n                        color: Colors.white,\n                        fontSize: 30,\n                        fontWeight: FontWeight.w500),\n                  ),\n                  Text(\n                    subtitle!.toUpperCase(),\n                    style: GoogleFonts.ibmPlexMono(\n                        color: Colors.white,\n                        fontSize: 15,\n                        fontWeight: FontWeight.w500),\n                  )\n                ],\n              ),\n            )\n          ],\n        ));\n  }\n}\n```\n\nThis is all for now, but do let me know if you have any questions through Twitter, LinkedIn or Sitecore Slack.",
  "seoDescription": "See how you could render Sitecore content in a Mobile App using Sitecore's Headless Services and Flutter."
}