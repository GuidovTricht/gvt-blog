{
  "publishedAt": "02-19-2022",
  "title": "Exploring the OrderCloud .NET SDK",
  "content": "While I explore the capabilities of OrderCloud I am taking notes as to what I do and how different tools from OrderCloud work. In this blog post I will share some of the things I learned about the .NET version of the OrderCloud SDK.\\\nThe .NET SDK is available as a NuGet package by the name \"OrderCloud.SDK\" and works with all the latest .NET versions (I used .NET 6.0).\n\nThis SDK is a library you will probably always need to build any OrderCloud based application.\\\nAs we know, OrderCloud is a headless commerce platform, meaning that the only way of communicating with it is through APIs. The SDK makes it easier for you to perform API requests to OrderCloud by giving you a structured way of managing connections to OrderCloud and providing a typed approach for performing those requests. \n\n## The OrderCloudClient\n\nThe .NET version of the SDK uses 'Clients' to perform API requests and store access tokens.\\\nThe first thing you want to do is create one of those clients:\n\n```csharp\nusing OrderCloud.SDK;\n\nvar client = new OrderCloudClient(new OrderCloudClientConfig {\n    ClientId = \"my-client-id\",\n  \n    // client credentials grant flow:\n    ClientSecret = \"my-client-secret\"\n\n    // OR password grant flow:\n    Username = u,\n    Password = p,\n\n    Roles = new [] { ApiRole.OrderAdmin }\n});\n```\n\nEach instance of a client automatically requests an access token on creation and stores it in its context. As you can see in above code snippet there are 2 ways of authenticating using these clients, using a username-password combination, or using a secret.\\\nThis can be used to create a client for each user which authenticates with your application, but if you don't want to do that you can also use the impersonation approach, which is the approach I would choose when building browser-based applications.\\\nWith the impersonating approach you can create a single client using a ClientSecret for initial authentication. After that you can specify an access token which should be used for the API requests to OrderCloud. This access token you could get from your client-side application, so you would still need the JavaScript SDK or a direct API integration in your frontend application.\n\nOnce you have a client, you can use it to perform API requests.\n\n```csharp\nvar orders = await client.Orders.ListAsync(OrderDirection.Incoming, filters: new { Status = OrderStatus.Open });\n```\n\nAs you can see in above example, the client provides a structure of methods and objects to perform API requests. This structure is based on the structure OrderCloud has put in their APIs, so for each category of APIs there is an instance of an interface in the OrderCloudClient object.\n\n![](/images/uploads/ordercloudclient-contents.png \"OrderCloudClient Methods\")\n\nEach of these interfaces has an implementation for each API request part of that category. For structured objects like Products, Categories and Orders that includes CRUD like implementations.\\\nSo instead of having to build your own client and maintain HttpClients, you can use these OrderCloudClients to connect to the OrderCloud APIs in a much easier way. \n\n## Extended Properties\n\nAnother big advantage of using this SDK is that you can use Strongly Typed Extended Properties.\\\nExtended Properties, or in short 'xp' (yes, very confusing coming from a Sitecore background), is a feature in OrderCloud which you can use to extend their data models. On many different models in OrderCloud you will see a property 'xp', for which you can specify any value to. This can be a simple flat object structure as well as multiple levels of objects.\\\nThese extended properties can be used on models like the Product and Category models.\n\nThere are two options in the .NET SDK on how you can specify this xp property.\\\nThe first option is to specify the dynamic object directly on the instance of the model. For example, on the OrderCloud.SDK.Product model we can specify the xp property as a dynamic object:\n\n```csharp\nvar product = new OrderCloud.SDK.Product();\nproduct.xp = new {\n    Brand = \"Microsoft\"\n};\n```\n\nThe second option is to set it using a strongly typed object. When you use the OrderCloud client to perform API requests to OrderCloud, you can in some cases also specify the Type of object the API request should send/return.\\\nIf you look at the interface for the Product APIs, then it has this Get method:\n\n```csharp\nTask<TProduct> GetAsync<TProduct>(string productID, string accessToken = null) where TProduct : Product;\n```\n\nAs you can see, you can specify a TProduct when calling this method. TProduct needs to be based on OrderCloud.SDK.Product. We can use OrderCloud.SDK.Product<Txp> as Type for these requests. Txp in this case can be any type of object and is assigned to the 'xp' property of the Product:\n\n```csharp\n// Type parameters:\n//   Txp:\n//     Specific type of the xp property. If not using a custom type, use the non-generic\n//     Product class instead.\npublic class Product<Txp> : Product\n{\n    // Summary:\n    //     Container for extended (custom) properties of the product.\n    public new Txp xp\n    {\n        get        \n        {\n            return GetProp<Txp>(\"xp\");\n        }\n        set\n        {\n            SetProp(\"xp\", value);\n        }\n    }\n}\n```\n\nSo, for Txp we can create a new model which specifies the properties our extended properties object should have, for example:\n\n```csharp\npublic class ProductXp\n{\n    public string Brand { get; set; }\n}\n```\n\nNow we can use these types to make the Get request to the OrderCloud APIs. The SDK will then deserialize the JSON response from OrderCloud and convert it to the type we specify.\n\n```csharp\nvar result = await client.Products.GetAsync<Product<ProductXp>>(productId);\n```\n\nThis same principle is applied to the PartialProduct model:\n\n```csharp\npublic class PartialProduct<Txp> : PartialProduct\n```\n\n## Verdict\n\nI think the SDK is a very helpful library which really helps you understand and integrate with the APIs of OrderCloud.\\\nThere are still some things I can learn, for example about how authentication in OrderCloudClients works exactly and if I have been using them correctly thus far in my journey.\\\nThe structure of the OrderCloudClient is quite complex, just like the APIs themselves. This does, in my opinion, require you to build a shell around them instead of using the OrderCloudClient directly from your first layer of code. I would probably do that anyway to bring a certain level of abstraction in my application.\n\nIn a next blog post, I will demonstrate the use of another toolkit provided by OrderCloud, the OrderCloud Catalyst. Stay tuned!",
  "seoDescription": "Learn how to use the OrderCloud .NET SDK, how the OrderCloudClient can be used and how the SDK makes a typed integration possible using Extended Properties."
}