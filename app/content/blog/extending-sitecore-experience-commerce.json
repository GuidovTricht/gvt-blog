{
  "publishedAt": "11-09-2019",
  "title": "Extending Sitecore Experience Commerce",
  "content": "When developing features and/or customizations for Sitecore Experience Commerce 9 (XC) it is good that you make sure you know the overall architecture of the product and its connection to Sitecore Experience Platform (XP).\\\nIn this post I want to discuss some of the basic must know architectural aspects as I also showed in my Sitecore Symposium 2019 session.\n\nAs you might know there is a connection between XC and XP. On one side you have the Item Service API from Sitecore XP, which is used by XC to get Sitecore Items and storefront configuration settings.\\\nNext to that Sitecore XP (or the Commerce Engine Connect module) gets data and performs commerce actions using the OData APIs from XC using the ServiceProxy, like adding products to a cart and creating the order.\n\n![XC Platform architecture](/images/uploads/xc-platform-architecture.png)\n\nBoth of these endpoints and integrations can be extended to create custom functionalities. The XP Item Service for example we extended for uploading media items in the product import process, which I described earlier in another [post](http://guidovtricht.nl/2019/06/sitecore-experience-commerce-product-images/).\n\nThe XC Engine itself has some ‘building blocks’ which we can use to our advantage.\n\n![XC building blocks](/images/uploads/xc-building-blocks.png)\n\n* ***Entities***; every data object(like Cart or SellableItem) inside XC is an Entity. You can create your own types and extend the existing ones.\n* ***Components***; every (custom) field on an Entity is added as an Component. You can create your own Component types and add them to any Entity.\n* ***Pipelines***; just like in XP, XC uses the pipeline pattern which makes it easy for us to extend and overwrite OOTB functionalities.\n* ***Policies***; these look a lot like Components but are used as settings.\n* ***Commands***; commands are used as Unit of Work functionalities and mostly triggered from an OData API.\n* ***Minions***; just like the Agents in XP, XC has its own variant called Minions. These Minions run every X minutes, can watch a list and be scaled out.\n\nLast but not least, there is the configuration. Currently you have to configure storefront settings partially in XP and partially in XC, which makes it sometimes hard for you to alter some settings without having to do a code change and deploy.\n\n![XC configuration](/images/uploads/xc-configuration.png)\n\nWhat we did in some of our custom(ized) functionalities is move all configuration to the XP side. You can extend the storefront templates with extra fields and read those out when XC gets that specific Sitecore Item using the Item Service.\\\nFor example, you can extend the GetShopPipeline to store extra fields from the Storefront template.\n\nAll other examples I showed during the session can be found on GitHub, so go check that out: <https://github.com/GuidovTricht>\\\nA couple of these repositories are also described in my other blog posts.",
  "seoDescription": "Must know details about the Sitecore Experience Commerce architecture before starting to extend it."
}