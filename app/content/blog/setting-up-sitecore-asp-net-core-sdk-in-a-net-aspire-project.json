{
  "publishedAt": "07-28-2025",
  "title": "Setting up Sitecore ASP.NET Core SDK in a .NET Aspire project",
  "content": "I﻿'ve recently been working on a project using .NET Aspire. This experience showed me the great potential of Aspire and how it can speed up the development process of large .NET platforms. During this time, I did wonder how Sitecore could fit into an Aspire architecture, so in this guide we will walk through the steps to get started with a new .NET Rendering Host for Sitecore on .NET Aspire.\n\n## P﻿rerequisites\n\nB﻿efore you begin, ensure you have the following installed:\n\n* .NET SDK version 8+\n* .﻿NET Aspire templates installed\\\n  *I﻿f you haven't already, you can run this command*\\\n  `dotnet new install Aspire.ProjectTemplates`\n* An OCI compliant container runtime, such as Docker Desktop\n* A﻿ Sitecore instance\\\n  *I﻿n this article we'll be using an XM Cloud instance*\n* V﻿isual Studio 2022+ (v17.9+)\n\n## Create a new .NET Aspire project\n\nW﻿e start of creating a new, clean, .NET Aspire project using the dotnet CLI.\n\n```\ndotnet new aspire --output SitecoreAspireApp\n```\n\nT﻿his will give us a .NET solution with the Aspire AppHost and ServiceDefaults projects.\n\nN﻿ext we will want to add an ASP.NET web project. Through Visual Studio I'm adding a new ASP.NET Core Empty project with the name `SitecoreAspireApp.Web` to the solution.\\\nI﻿n the creation dialog, you will notice a checkbox name `Enlist in .NET Aspire orchestration`. Since we started off with an empty Aspire template, this won't do anything.\n\n![Create new project dialog](/images/uploads/new-aspire-project.png \"Create new project dialog\")\n\n## C﻿onfigure Aspire orchestration\n\nNow that we have our base project setup created, we can configure the Aspire orchestration.\n\nOrchestration happens by defining which modules, projects and/or containers to run in the SitecoreAspireApp.AppHost/AppHost.cs file.\\\nA﻿dd a project reference from `SitecoreAspireApp.AppHost` to `SitecoreAspireApp.Web` and update the AppHost.cs file with the following code.\n\n```csharp\nvar builder = DistributedApplication.CreateBuilder(args);\n\nbuilder.AddProject<Projects.SitecoreAspireApp_Web>(\"webfrontend\")\n    .WithExternalHttpEndpoints();\n\nbuilder.Build().Run();\n```\n\nI﻿n the Web project we will want to make use of the ServiceDefaults, a clean way to add base configuration and packages to any project, such as OpenTelemetry configuration.\\\nA﻿dd a project reference from `SitecoreAspireApp.Web` to `SitecoreAspireApp.ServiceDefaults` and update the Program.cs in the Web project with the following code.\n\n```csharp\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add service defaults\nbuilder.AddServiceDefaults();\n\nvar app = builder.Build();\n\napp.MapGet(\"/\", () => \"Hello World!\");\n\napp.Run();\n```\n\nR﻿unning the AppHost project will now result in Aspire running your Web project including Tracing and Healthchecks.\n\n![.NET Aspire Dashboard](/images/uploads/aspire-dashboard.jpeg \".NET Aspire Dashboard\")\n\n## A﻿dding the Sitecore .NET Core SDK\n\nN﻿ext, we can setup the Sitecore .NET Core SDK in our Web project.\\\nT﻿o do so, add the following NuGet packages to the Web project:\n\n* Sitecore.AspNetCore.SDK.ExperienceEditor\n* Sitecore.AspNetCore.SDK.LayoutService.Client\n* Sitecore.AspNetCore.SDK.RenderingEngine\n\nT﻿he minimal setup of a Sitecore .NET Core SDK based application requires us to add/update three files:\n\n1. a﻿ppsettings.json - To add the Sitecore configuration and connection details\n2. P﻿rogram.cs - To add the necessary services and middleware capabilities of the SDK\n3. C﻿ontrollers/DefaultController.cs - An MVC Controller that will capture and handle all traffic routed through the application\n\nA﻿dd and/or update the files with the following code:\n\n**a﻿ppsettings.json**\\\n*M﻿ake sure to update the Sitecore settings according to your environment.*\n\n```json\n{\n  \"Sitecore\": {\n    \"EdgeContextId\": \"\",\n    \"DefaultSiteName\": \"\",\n    \"EditingSecret\": \"\",\n    \"EnableEditingMode\": true,\n    \"EditingPath\": \"/api/editing/config\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n```\n\n**M﻿odels/SitecoreSettings.cs**\n\n```\nnamespace SitecoreAspireApp.Web.Models;\n\npublic class SitecoreSettings\n{\n    public static readonly string Key = \"Sitecore\";\n\n    public string? DefaultSiteName { get; set; }\n\n    public string? EditingSecret { get; set; }\n\n    public string? EdgeContextId { get; set; }\n\n    public bool EnableEditingMode { get; set; }\n\n    public string? EditingPath { get; set; }\n\n    public bool EnableLocalContainer { get; set; }\n\n    public Uri? LocalContainerLayoutUri { get; set; }\n}\n```\n\n**M﻿odels/Layout.cs**\n\n```csharp\nusing Sitecore.AspNetCore.SDK.RenderingEngine.Binding.Attributes;\n\nnamespace SitecoreAspireApp.Web.Models;\n\npublic class Layout\n{\n    [SitecoreRouteField]\n    public string? Name { get; set; }\n\n    [SitecoreRouteField]\n    public string? DisplayName { get; set; }\n\n    [SitecoreRouteField]\n    public string? ItemId { get; set; }\n\n    [SitecoreRouteField]\n    public string? ItemLanguage { get; set; }\n\n    [SitecoreRouteField]\n    public string? TemplateId { get; set; }\n\n    [SitecoreRouteField]\n    public string? TemplateName { get; set; }\n}\n```\n\n**C﻿ontrollers/DefaultController.cs**\n\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing Sitecore.AspNetCore.SDK.LayoutService.Client.Exceptions;\nusing Sitecore.AspNetCore.SDK.RenderingEngine.Attributes;\nusing Sitecore.AspNetCore.SDK.RenderingEngine.Extensions;\nusing Sitecore.AspNetCore.SDK.RenderingEngine.Interfaces;\nusing SitecoreAspireApp.Web.Models;\n\nnamespace SitecoreAspireApp.Web.Controllers;\n\npublic class DefaultController : Controller\n{\n    private readonly SitecoreSettings? _settings;\n    private readonly ILogger<DefaultController> _logger;\n\n    public DefaultController(ILogger<DefaultController> logger, IConfiguration configuration)\n    {\n        _settings = configuration.GetSection(SitecoreSettings.Key).Get<SitecoreSettings>();\n        ArgumentNullException.ThrowIfNull(_settings);\n        _logger = logger;\n    }\n\n    [UseSitecoreRendering]\n    public IActionResult Index(Layout model)\n    {\n        IActionResult result = Empty;\n        ISitecoreRenderingContext? request = HttpContext.GetSitecoreRenderingContext();\n        if ((request?.Response?.HasErrors ?? false) && !IsPageEditingRequest(request))\n        {\n            foreach (SitecoreLayoutServiceClientException error in request.Response.Errors)\n            {\n                switch (error)\n                {\n                    case ItemNotFoundSitecoreLayoutServiceClientException:\n                        result = View(\"NotFound\");\n                        break;\n                    default:\n                        _logger.LogError(error, \"{Message}\", error.Message);\n                        throw error;\n                }\n            }\n        }\n        else\n        {\n            result = View(model);\n        }\n\n        return result;\n    }\n\n    public IActionResult Error()\n    {\n        return View();\n    }\n\n    private bool IsPageEditingRequest(ISitecoreRenderingContext request)\n    {\n        return request.Controller?.HttpContext.Request.Path == (_settings?.EditingPath ?? string.Empty);\n    }\n}\n```\n\n**P﻿rogram.cs**\n\n```csharp\nusing Microsoft.AspNetCore.Localization;\nusing Sitecore.AspNetCore.SDK.GraphQL.Extensions;\nusing Sitecore.AspNetCore.SDK.LayoutService.Client.Extensions;\nusing Sitecore.AspNetCore.SDK.RenderingEngine.Extensions;\nusing SitecoreAspireApp.Web.Models;\nusing System.Globalization;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add service defaults\nbuilder.AddServiceDefaults();\n\nSitecoreSettings? sitecoreSettings = builder.Configuration.GetSection(SitecoreSettings.Key).Get<SitecoreSettings>();\nArgumentNullException.ThrowIfNull(sitecoreSettings);\n\nbuilder.Services.AddRouting()\n                .AddLocalization()\n                .AddMvc();\n\nbuilder.Services.AddGraphQLClient(configuration =>\n                {\n                    configuration.ContextId = sitecoreSettings.EdgeContextId;\n                })\n                .AddMultisite();\n\nif (sitecoreSettings.EnableLocalContainer)\n{\n    // Register the GraphQL version of the Sitecore Layout Service Client for use against local container endpoint\n    builder.Services.AddSitecoreLayoutService()\n                    .AddGraphQLHandler(\"default\", sitecoreSettings.DefaultSiteName!, sitecoreSettings.EdgeContextId!, sitecoreSettings.LocalContainerLayoutUri!)\n                    .AsDefaultHandler();\n}\nelse\n{\n    // Register the GraphQL version of the Sitecore Layout Service Client for use against experience edge\n    builder.Services.AddSitecoreLayoutService()\n                    .AddGraphQLWithContextHandler(\"default\", sitecoreSettings.EdgeContextId!, siteName: sitecoreSettings.DefaultSiteName!)\n                    .AsDefaultHandler();\n}\n\nbuilder.Services.AddSitecoreRenderingEngine()\n                .ForwardHeaders();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\napp.UseMultisite();\napp.UseStaticFiles();\n\nconst string defaultLanguage = \"en\";\napp.UseRequestLocalization(options =>\n{\n    // If you add languages in Sitecore which this site / Rendering Host should support, add them here.\n    List<CultureInfo> supportedCultures = [new CultureInfo(defaultLanguage)];\n    options.DefaultRequestCulture = new RequestCulture(defaultLanguage, defaultLanguage);\n    options.SupportedCultures = supportedCultures;\n    options.SupportedUICultures = supportedCultures;\n    options.UseSitecoreRequestLocalization();\n});\n\napp.MapControllerRoute(\n    \"error\",\n    \"error\",\n    new { controller = \"Default\", action = \"Error\" }\n);\n\napp.MapSitecoreLocalizedRoute(\"sitecore\", \"Index\", \"Default\");\napp.MapFallbackToController(\"Index\", \"Default\");\n\napp.Run();\n```\n\nA﻿fter making these changes, you should be able to start the AppHost and see your Web application running.\n\nF﻿rom this point you will be able to follow the [official Sitecore documentation](https://doc.sitecore.com/xmc/en/developers/asp-net/latest/asp-net-core-sdk/sitecore-asp-net-core-sdk.html#development-tasks-with-the-aspnet-core-sdk) to continue building out your Head application.\n\n## F﻿inal thoughts\n\nT﻿he Aspire framework offers great value in being able to easily use modules to integrate with various 3rd party tools, such as Redis, Entity Framework, Kafka and many others. This alone makes it a great starting point for any Sitecore platform.\n\nT﻿he only thing that may feel odd is how to fit the AppHost and ServiceDefaults projects in the Sitecore Helix guidelines. These projects provide features that could fit in any of the Helix layers, so you yourself will have to find out where it fits best for your solution.\n\nO﻿verall, I highly recommend using Aspire in your next .NET based project!",
  "seoDescription": "Explore how .NET Aspire can be the foundation of your next Sitecore platform. This guide walks you through the steps to get started with a new .NET solution based on the Sitecore ASP.NET Core SDK and .NET Aspire."
}