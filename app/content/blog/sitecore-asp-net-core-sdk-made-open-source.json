{
  "publishedAt": "11-06-2024",
  "title": "Sitecore ASP.NET Core SDK made open-source",
  "content": "A﻿ couple of weeks ago, Sitecore made the .NET Core variant of their Headless Rendering SDK open-source on GitHub. If you haven't seen it yet, check it out here: <https://github.com/Sitecore/ASP.NET-Core-SDK>\n\nW﻿ith the release (or the planning of) this open-source SDK, the old Headless Rendering SDKs have not been updated past version 21.x while JSS has received recent updates specifically for Sitecore 10.4.\\\nT﻿his will most likely mean that at some point everyone will have to switch to the new SDKs when breaking changes occur in future Sitecore releases.\n\nT﻿he open-source version of this SDK does come with some improvements compared to the old version, which I will highlight in the rest of this article.\n\n## M﻿ultisite support\n\nT﻿he new version finally brings multisite support. This is done through a Middleware module which checks: \n\n1. Whether the ?sc_site query string is present in the request.\n2. And if not, it will determine the site name based on the request hostname, by mapping it against the Site collection data returned by the GraphQL SiteInfoCollectionQuery query.\n\nThe MultisiteMiddleware is part of the Sitecore.AspNetCore.SDK.RenderingEngine NuGet package. To enable this feature you need to 1) make sure the GraphQlClient is registered in DI, 2) add the necessary Multisite services to DI and 3) insert the Middleware in the application.\n\n```csharp\n//Below snippets need to be added to the Program.cs\n\n...\n  \n// Add the GraphQlClient to Dependency Injection\nbuilder.Services.AddGraphQlClient(configuration =>\n{\n    configuration.ContextId = sitecoreSettings.EdgeContextId;\n});\n\n// Add the Multisite services to Dependency Injection\nbuilder.Services.AddMultisite();\n\n...\n  \n// Insert the MultisiteMiddleware into the application\napp.UseMultisite();\n\n...\n```"
}