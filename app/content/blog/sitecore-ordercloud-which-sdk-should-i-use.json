{
  "publishedAt": "12-31-2021",
  "title": "Sitecore OrderCloud - Which SDK should I use?",
  "content": "Over the past few weeks I have been playing around with Sitecore OrderCloud. I learned that there are multiple ways on how you can build an application around the OrderCloud APIs.\n\nIf you want to start building your own application using OrderCloud but don't have an account yet, you can create a free sandbox account. A good place to start is by following the Getting Started tutorial on ordercloud.io: <https://ordercloud.io/learn/getting-started/welcome-to-ordercloud>\n\nOrderCloud comes with a couple of different SDKs which you can use to base your application on. In this post I will be taking a look at the following:\n\n* Open API\n* JavaScript SDK\n* .NET SDK\n\n## Open API\n\nYou can build your application by directly using OrderCloud's APIs.\\\nTheir APIs have been built based on the Open API standard. The specs can be found here: <https://api.ordercloud.io/v1/openapi/v3>\\\nThese specs can be imported in Postman to make it easier for you to interpret the APIs and to test them out.\n\nThe APIs however are quite complex in my opinion, so I would not use them to directly integrate with in my application.\\\nThe Postman collections do however give you a good understanding of what is possible in OrderCloud, so it is still great to have them while you are developing your application.\n\nOne API you could use directly is the /oauth/token request to log a user in. This API will provide you with a token which you then need to use as a Bearer token to authenticate with the other APIs.\n\n## JavaScript SDK\n\nOrderCloud provides a JavaScript SDK which can be used to build a typed integration in any client-side framework. The SDK has been built with TypeScript support, so you can also use it in TypeScript based frameworks.\n\nThe SDK can easily be installed using NPM:\n\n`npm install ordercloud-javascript-sdk --save`\n\nThe first thing you want to build for your application is a login form. When submitting this form you want to authenticate against OrderCloud's APIs. Doing this using the JS SDK is quite simple as you can do it using typed objects:\n\n```javascript\nimport { Auth, Tokens } from 'ordercloud-javascript-sdk';\n\nconst username = 'YOUR_USERNAME'; //username of the user logging in\nconst password = 'YOUR_PASSWORD'; //password of the user logging in\nconst clientID = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'; //clientID of the application the user is logging in to (\\[sign up for free](https://portal.ordercloud.io/register)\nconst scope = \\['FullAccess']; //string array of \\[roles](https://ordercloud.io/knowledge-base/security-profiles) the application has access to\n\nAuth.Login(username, password, clientID, scope)\n  .then(response => {\n      //store token, now any subsequent calls will automatically set this token in the headers for you\n      const token = response.access_token;\n      Tokens.SetAccessToken(token)\n  })\n  .catch(err => console.log(err));\n```\n\nThe Auth.Login method will return an access token. This token should be uses in any subsequent API calls to OrderCloud as it authenticates the user when performing the next request.\\\nAs you can see in above example, this token is stored in the application context using Tokens.SetAccessToken. After doing this any next requests will automatically use the stored token.\n\nWe can use any of OrderCloud's APIs in the same way as above Login functionality using type objects, like getting a list of products:\n\n```javascript\nimport { Me } from 'ordercloud-javascript-sdk';\n\n// Get products\nMe.ListProducts()\n  .then(productList => console.log(productList))\n```\n\nThe full JavaScript SDK is available on GitHub and describes the many different options it offers: <https://github.com/ordercloud-api/ordercloud-javascript-sdk>\n\n## .NET SDK\n\nVery similar to the JavaScript SDK, OrderCloud also has a .NET C# based version of their SDK.\\\nThe SDK is available as a NuGet package by the name \"OrderCloud.SDK\" and works with all the latest .NET versions (I used .NET 6.0).\n\nThe .NET version of the SDK uses 'Clients' to perform API requests and store access tokens.\\\nThe first thing you want to do is create one of those clients:\n\n```csharp\nusing OrderCloud.SDK;\n\nvar client = new OrderCloudClient(new OrderCloudClientConfig {\n    ClientId = \"my-client-id\",\n\n    // client credentials grant flow:\n    ClientSecret = \"my-client-secret\"\n\n    // OR password grant flow:\n    Username = u,\n    Password = p,\n  \n    Roles = new [] { ApiRole.OrderAdmin }\n});\n```\n\nEach instance of a client automatically requests an access token on creation and stores it in it's context. As you can see in above code snippet there are 2 ways of authenticating using these clients, using a username-password combination or using a secret.\\\nThis can be used to create a client for each user which authenticates with your application, but if you don't want to do that you can also use the impersonation approach, which is the approach I would choose when building browser based applications.\\\nWith the impersonating approach you can create a single client using a ClientSecret for initial authentication. After that you can specify an access token which should be used for the API requests to OrderCloud. This access token you could get from your client-side application, so you would still need the JavaScript SDK or a direct API integration in your frontend application.\n\nOnce you have a client, you can use it to perform API requests.\n\n```csharp\nvar orders = await client.Orders.ListAsync(OrderDirection.Incoming, filters: new { Status = OrderStatus.Open });\n```\n\nAbove example shows how you could get a list of orders from OrderCloud. The retrieved list will be based on the context user as defined in the client instance.\\\nIf you want to impersonate a user, you can specify the access token in the same method:\n\n```csharp\nvar orders = await client.Orders.ListAsync(OrderDirection.Incoming, filters: new { Status = OrderStatus.Open }, access_token: token);\n```\n\nThis SDK is also available on GitHub: <https://github.com/ordercloud-api/ordercloud-dotnet-sdk>\n\n## Which approach should I choose?\n\nEach of these SDKs are valid options to build your application on, it really depends on the application you want to build, their purpose and your own opinion.\n\nIn would probably always choose the .NET SDK as a basis for my application, simply because of all the possibilities .NET offers me.\\\nFor the client-side application I might use the JavaScript SDK, but the only purpose of integrating with OrderCloud in my client-side is to authenticate a user and retrieve an access token. Using the full JavaScript SDK for only this purpose might be a bit overkill, so it might be easier to create a simple integration with the authentication API directly.",
  "seoDescription": "In this blog post I describe some of the available SDKs and ways of integrating with Sitecore OrderCloud. Learn how to use the JavaScript SDK, .NET SDK and Postman/Open API to build your commerce application using OrderCloud."
}