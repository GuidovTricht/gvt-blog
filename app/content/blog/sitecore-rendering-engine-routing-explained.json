{
  "publishedAt": "11-30-2020",
  "title": "Sitecore Rendering Engine routing explained",
  "content": "If we want to be able to fully understand the way routing works in Sitecore's ASP.NET Core Rendering Engine, we first need to understand how the out-of-the-box routing works in ASP.NET Core.\n\n## ASP.NET Core routing\n\nASP.NET Core uses a concept called \"Middleware\" to compose a request handling pipeline. This pipeline can be composed of multiple middleware components where each component performs operations on the HttpContext object and either terminates the request (when returning a result to the client) or triggers the next middleware component.\n\n![ASP.NET Core Middleware](/images/uploads/request-delegate-pipeline.png \"ASP.NET Core Middleware\")\n\nThese middleware components are added in the Configure method in the Startup.cs of your ASP.NET Core project.\\\nA basic MVC ASP.NET Core middleware configuration would look something like this:\n\n```csharp\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseHttpsRedirection();\n    app.UseStaticFiles();\n\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapDefaultControllerRoute();\n        endpoints.MapRazorPages();\n    });\n}\n```\n\nUsing this configuration each request would follow a pipeline process like:\n\n1. UseHttpsRedirection; Redirect HTTP to HTTPS\n2. UseStaticFiles; If the request path corresponds to a file on disk, return that file.\n3. UseRouting; Enable the usage of endpoints configuration\n\n   1. MapDefaultControllerRoute; Check if controller and action exists corresponding with a default MVC route like /{controller}/{action}/{id?} and execute it\n   2. MapRazorPages; Return a Razor Page result if any correspond to the path\n\nEach of these middleware components can terminate the pipeline, so if a static file exists corresponding to the request path it won't trigger the components after that.\n\n## The Sitecore way\n\nNow that we know what comes out-of-the-box with ASP.NET Core, what is it that Sitecore built on top of this?\\\nThe Sitecore Rendering Engine inserts its own middleware components, but doesn’t actually use such a component to handle routing directly. Instead they assign a ‘fallback’ controller, resulting in all requests being processed by the same controller and action.\n\n```csharp\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        \"error\",\n        \"error\",\n        new { controller = \"Default\", action = \"Error\" }\n    );\n\n    endpoints.MapControllerRoute(\n        \"healthz\",\n        \"healthz\",\n        new { controller = \"Default\", action = \"Healthz\" }\n    );\n\n    // Enables the default Sitecore URL pattern with a language prefix.\n    endpoints.MapSitecoreLocalizedRoute(\"sitecore\", \"Index\", \"Default\");\n\n    // Fall back to language-less routing as well, and use the default culture (en).\n    endpoints.MapFallbackToController(\"Index\", \"Default\");\n});\n```\n\nA DefaultController with method Index is created in the web project for this fallback purpose.\n\n```csharp\n[UseSitecoreRendering]\npublic IActionResult Index(Route route)\n{\n\t...\n\n\treturn View(route);\n}\n```\n\nThis Index method has two key characteristic. First it has a parameter of object type Route and second it has a data attribute UseSitecoreRendering. Populating this Route parameter is a two step process:\n\nAs a first step, the UseSitecoreRendering attribute adds another middleware component to the request configuration. This component then triggers a request to the Sitecore Layout Service to fetch all the page and rendering data for the context page. This Layout Service request is performed by an ISitecoreLayoutClient service, which is configured in the ConfigureServices method of the Startup.cs:\n\n```csharp\n// Register the Sitecore Layout Service Client, which will be invoked by the Sitecore Rendering Engine.\nservices.AddSitecoreLayoutService()\n    // Set default parameters for the Layout Service Client from our bound configuration object.\n    .WithDefaultRequestOptions(request =>\n    {\n        request\n            .SiteName(Configuration.DefaultSiteName)\n            .ApiKey(Configuration.ApiKey);\n    })\n    .AddHttpHandler(\"default\", Configuration.LayoutServiceUri)\n    .AsDefaultHandler();\n```\n\nWhat is important to note here, is that this is the place the site name and API key for the requests are set. These settings are added to the request query string for the Layout Service to determine the context site of the request and to check if the application actually has the authorization to perform this request based on the API key.\n\nOnce the middleware component has received the response, it creates a SitecoreRenderingContext object including the Layout Service response and stores it in the HttpContext.\n\nThe second step then uses this SitecoreRenderingContext object. Sitecore has added a BindingSource called SitecoreLayoutRouteBindingSource, which then takes the Route object from the SitecoreRenderingContext in the HttpContext and returns is. Through model binding this Route object is that the source for populating the Route object parameter of the Index method.\n\n## In action\n\nSo let's see this in action. Taking the MVP-Site example setup (<https://github.com/Sitecore/MVP-Site>), when I open the About page of the MVP site I get to see the following page.\n\n![About page of MVP site](/images/uploads/about-page.png \"About page of MVP site\")\n\nDuring the request processing in the Rendering Engine, the ISitecoreLayoutClient would make a GET request using the following URL:\\\nhttps://mvp-cd.sc.localhost/sitecore/api/layout/render/jss?item=/About&sc_lang=en&sc_apikey={E2F3D43E-B1FD-495E-B4B1-84579892422A}&sc_site=mvp-site\n\nNote that the URL contains the request path in the query string as \"item=/About\", just like it contains the language, API key and site name.\n\nIf we were to open this URL in directly in a browser, it would show us the raw Layout Service response.\n\n![Layout Service JSON result of about page](/images/uploads/about-json.png \"Layout Service JSON result of about page\")\n\nBased on this JSON response the Rendering Engine then renders the entire page.\n\nLet's take a closer look at how this rendering process works in a next blog post!",
  "seoDescription": "In this blog post I show how routing works in ASP.NET Core compared to the Sitecore Rendering Engine and how it uses the Sitecore Layout Service."
}