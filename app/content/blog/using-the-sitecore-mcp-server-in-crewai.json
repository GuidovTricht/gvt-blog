{
  "publishedAt": "07-27-2025",
  "title": "Using the Sitecore MCP Server in CrewAI",
  "content": "I﻿n a previous post, we've seen how to build your own AI application using CrewAI. The Sitecore MCP Server is a Model Context Protocol (MCP) server implementation designed to integrate Sitecore content with AI agents like those in CrewAI. This guide walks you through setting up and using the MCP Server within a CrewAI environment to enable intelligent, context-aware interactions with Sitecore-managed content.\n\nBut before we start, a big shout out to Anton Tishchenko for driving the development of this MCP Server!\n\n## What is an MCP Server?\n\nAn MCP Server acts as a bridge between your AI agents and another platform by exposing a structured API that conforms to the Model Context Protocol. This allows agents to query, retrieve, and reason using tools of the integrated platform in a standardized way.\n\n## What you'll need\n\nB﻿efore you start, make sure you have:\n\n* A﻿ running Sitecore instance (XM Cloud or version 10+)\n* A﻿ CrewAI agent setup (see [this article](https://guidovtricht.nl/blog/getting-started-with-ai-framework-crewai) as an example)\n\n  * I﻿ncluding the `crewai-tools[mcp]` and `mcp` python modules installed\n* T﻿he necessary values as described in the MCP Server README, such as\n\n  * S﻿itecore CM domain\n  * S﻿itecore API key\n  * I﻿tem service username + password\n  * S﻿itecore PowerShell Extensions admin username + password\n\n## S﻿etup your crew\n\nL﻿et's create a new, Sitecore Content Management, crew in CrewAI. This is very similar to a regular crew setup, with some additions to add MCP servers to the context.\n\nF﻿irst we need to define the MCP server parameters. The Sitecore MCP Server runs through the Stdio transport mechanism, meaning it will run a command on the machine to start the MCP Server application. In the case of the Sitecore MCP Server, we want to run it straight from NPM using the `npx` command.\\\nA﻿dditionally, we need to specify all the environment variables according to the Sitecore instance you want to connect to.\n\n```python\nserver_params=StdioServerParameters(\n    command=\"npx\",\n    args=[\"@antonytm/mcp-sitecore-server@latest\"],\n    env={\n      \"TRANSPORT\": \"stdio\",\n      \"GRAPHQL_ENDPOINT\": \"https://[your sitecore cm domain]/sitecore/api/graph/\",\n      \"GRAPHQL_SCHEMAS\": \"edge,master,core\",\n      \"GRAPHQL_API_KEY\": \"[your API key]\",\n      \"GRAPHQL_HEADERS\": \"\",\n      \"ITEM_SERVICE_DOMAIN\": \"sitecore\",\n      \"ITEM_SERVICE_USERNAME\": \"admin\",\n      \"ITEM_SERVICE_PASSWORD\": \"b\",\n      \"ITEM_SERVICE_SERVER_URL\": \"https://[your sitecore cm domain]/\",\n      \"POWERSHELL_DOMAIN\": \"sitecore\",\n      \"POWERSHELL_USERNAME\": \"admin\",\n      \"POWERSHELL_PASSWORD\": \"b\",\n      \"POWERSHELL_SERVER_URL\": \"https://[your sitecore cm domain]/\",\n    }\n)\n```\n\nU﻿sing these server parameters, we can now define the MCP Server Adapter context and start defining our Agents and Tasks. To create the context object, create a new `MCPServerAdapter` with the `server_params` as parameters as shown below.\n\n```python\nwith MCPServerAdapter(server_params) as mcp_tools:\n```\n\nW﻿ithin the `with`, you can then start creating your Crew.\n\nA﻿ full Crew setup file would look something like this:\n\n```python\nfrom crewai import Agent, Task, Crew, Process\nfrom crewai_tools import MCPServerAdapter\nfrom mcp import StdioServerParameters # For Stdio Server\n\nclass SitecoreCrew():\n    server_params=StdioServerParameters(\n        command=\"npx\",\n        args=[\"@antonytm/mcp-sitecore-server@latest\"],\n        env={\n            \"TRANSPORT\": \"stdio\",\n            \"GRAPHQL_ENDPOINT\": \"https://[your sitecore cm domain]/sitecore/api/graph/\",\n            \"GRAPHQL_SCHEMAS\": \"edge,master,core\",\n            \"GRAPHQL_API_KEY\": \"[your API key]\",\n            \"GRAPHQL_HEADERS\": \"\",\n            \"ITEM_SERVICE_DOMAIN\": \"sitecore\",\n            \"ITEM_SERVICE_USERNAME\": \"admin\",\n            \"ITEM_SERVICE_PASSWORD\": \"b\",\n            \"ITEM_SERVICE_SERVER_URL\": \"https://[your sitecore cm domain]/\",\n            \"POWERSHELL_DOMAIN\": \"sitecore\",\n            \"POWERSHELL_USERNAME\": \"admin\",\n            \"POWERSHELL_PASSWORD\": \"b\",\n            \"POWERSHELL_SERVER_URL\": \"https://[your sitecore cm domain]/\",\n        },\n    )\n    \n    with MCPServerAdapter(server_params) as mcp_tools:\n        print(f\"Available tools: {[tool.name for tool in mcp_tools]}\")\n        content_manager_agent = Agent(\n            role=\"Content Manager\",\n            goal=\"To create and manage content effectively within the Sitecore environment.\",\n            backstory=\"You are a content management expert with a deep understanding of Sitecore's capabilities. You excel at creating, editing, and optimizing content to enhance user engagement.\",\n            reasoning=True,\n            verbose=True,\n            max_iter=1,\n            tools=mcp_tools # Pass the loaded tools to your agent\n        )\n\n        read_content_task = Task(\n            description=\"Read content from the Sitecore environment based on the provided parameters.\",\n            expected_output=\"The content retrieved from Sitecore.\",\n            agent=content_manager_agent\n        )\n\n        def crew(self) -> Crew:\n            \"\"\"Creates the crew\"\"\"\n            return Crew(\n                agents=[self.content_manager_agent],\n                tasks=[self.read_content_task],\n                verbose=True,\n                process=Process.sequential\n            )\n```\n\nF﻿rom here, you can use the `SitecoreCrew().crew()` method in your application to trigger the agent to run.\n\n## F﻿inal thoughts\n\nThe Sitecore MCP Server is a great starting point for anyone looking to integrate AI capabilities into Sitecore. Whether you're building a smart assistant, a content-aware chatbot, or a dynamic content delivery system, this integration is a solid foundation and I'm looking forward to seeing what the Sitecore community can come up with.\nReady to try it out? Head over to the [GitHub repo](https://github.com/Antonytm/mcp-sitecore-server) and get started today.",
  "seoDescription": "The Sitecore MCP Server is a Model Context Protocol (MCP) server implementation designed to integrate Sitecore content with AI agents like those in CrewAI. This guide walks you through setting up and using the MCP Server within a CrewAI environment to enable intelligent, context-aware interactions with Sitecore-managed content."
}